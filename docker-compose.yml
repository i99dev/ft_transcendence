version: '3'

services:
    # frontend (Nuxtjs)
    web:
        container_name: ft_transcendence_web

        build: ./app/web

        environment:
            - NODE_ENV=${NODE_ENV}
            - CLIENT_ID=${CLIENT_ID}
            - CLIENT_SECRET=${CLIENT_SECRET}
            - REDIRECT_URI=${REDIRECT_URI}
            - API_URL=${API_URL}

        volumes:
            - ./app/web:/usr/src/app

        init: true

        command: ['sh', '-c', 'yarn install && yarn run dev']

        networks:
            - proxy_frontend_net

        ports:
            - 24678:24678

        depends_on:
            - api

        restart: on-failure

    # backend (Nestjs)
    api:
        container_name: ft_transcendence_api

        build: ./app/api

        volumes:
            - ./app/api:/usr/src/app

        init: true

        command: ['sh', '-c', 'yarn && npx prisma migrate dev && npx prisma studio | yarn dev']

        environment:
            - NODE_ENV=${NODE_ENV}
            - CLIENT_ID=${CLIENT_ID}
            - CLIENT_SECRET=${CLIENT_SECRET}
            - REDIRECT_URI=${REDIRECT_URI}
            - DATABASE_URL=${DATABASE_URL}
            - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
            - JWT_SECRET=${JWT_SECRET}
            - PORT=${PORT}

        networks:
            - proxy_backend_net
            - backend_db_net

        ports:
            - 5555:5555
            - 8000:8000

        depends_on:
            - db

        restart: on-failure

    # Database (Postgres)
    db:
        container_name: ft_transcendence_db

        image: postgres:12

        environment:
            - NODE_ENV=${NODE_ENV}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}

        volumes:
            - db-data:/var/lib/postgresql/data

        networks:
            - backend_db_net

        restart: unless-stopped

    # reverse proxy (nginx)
    nginx:
        container_name: ft_transcendence_nginx

        image: nginx:latest

        environment:
            - NODE_ENV=${NODE_ENV}

        ports:
            - 80:80

        volumes:
            - ./config/default.conf:/etc/nginx/conf.d/default.conf

        init: true

        networks:
            - proxy_frontend_net
            - proxy_backend_net

        depends_on:
            - api
            - web

        restart: on-failure

networks:
    proxy_frontend_net:
    proxy_backend_net:
    backend_db_net:

volumes:
    db-data:
