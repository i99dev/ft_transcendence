// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model User {
    id           Int            @id @default(autoincrement())
    login        String         @unique
    username     String         @unique
    email        String         @unique
    status       UserStatus     @default(OFFLINE)
    first_name   String?
    last_name    String?
    created_at   DateTime       @default(now())
    last_login   DateTime       @default(now())
    image        String?
    xp           Int            @default(0)
    ladder       Int            @default(6)
    wr           Float          @default(0)
    two_fac_auth Boolean        @default(false)
    block_list   User[]         @relation("UserBlockList")
    blocked_by   User[]         @relation("UserBlockList")
    achievements Achievement[]  @relation("UserAchievements")
    power_ups    PowerUp[]      @relation("UserPowerUps")
    friend_to    User[]         @relation("UserFriends")
    friends      User[]         @relation("UserFriends")
    player       Player[]       @relation("player")
    direct_chats DirectChat[]   @relation("DirectChatUsers")
    chat         ChatUser[]
    message      Message[]
    notification Notification[]
}

model Player {
    id       Int     @id @default(autoincrement())
    userID   Int
    matchID  String
    score    Int     @default(0)
    IsWinner Boolean @default(false)
    user     User    @relation("player", fields: [userID], references: [id])
    matches  Match   @relation("MatchOpponents", fields: [matchID], references: [gameID])
}

model Match {
    gameID    String   @id @unique
    start     DateTime @default(now())
    end       DateTime @default(now())
    opponents Player[] @relation("MatchOpponents")
}

model PowerUp {
    id     Int    @id @default(autoincrement())
    type   String @unique @default("default")
    period Int    @default(0)
    users  User[] @relation("UserPowerUps")
}

model Achievement {
    id          Int     @id @default(autoincrement())
    type        String  @unique @default("default")
    description String?
    image       String?
    users       User[]  @relation("UserAchievements")
}

model ChatRoom {
    id          Int          @id @default(autoincrement())
    room_id     String       @unique
    created_at  DateTime     @default(now())
    type        ChatRoomType
    direct_chat DirectChat?
    group_chat  GroupChat?
    messages    Message[]
}

model DirectChat {
    id           Int      @id @default(autoincrement())
    chat_room_id String   @unique
    chat_room    ChatRoom @relation(fields: [chat_room_id], references: [room_id])
    users        User[]   @relation("DirectChatUsers")
}

model GroupChat {
    id           Int        @id @default(autoincrement())
    name         String?
    image        String?
    type         chatType   @default(PUBLIC)
    password     String?
    chat_user    ChatUser[]
    chat_room_id String     @unique
    chat_room    ChatRoom   @relation(fields: [chat_room_id], references: [room_id])
}

model ChatUser {
    id           Int            @id @default(autoincrement())
    role         ChatUserRole   @default(MEMBER)
    status       ChatUserStatus @default(NORMAL)
    created_at   DateTime       @default(now())
    user_login   String
    chat_room_id String
    chat         GroupChat      @relation(fields: [chat_room_id], references: [chat_room_id])
    user         User           @relation(fields: [user_login], references: [login])

    @@unique([chat_room_id, user_login], name: "chat_user")
}

model Message {
    id           Int         @id @default(autoincrement())
    content      String
    created_at   DateTime    @default(now())
    type         MessageType @default(NORMAL)
    chat_room_id String
    sender_login String
    chat_room    ChatRoom    @relation(fields: [chat_room_id], references: [room_id])
    sender       User        @relation(fields: [sender_login], references: [login])
}

model Notification {
    id         Int              @id @default(autoincrement())
    created_at DateTime         @default(now())
    user_login String
    content    String
    type       NotificationType
    target     String?
    user       User             @relation(fields: [user_login], references: [login])
}

enum UserStatus {
    OFFLINE
    ONLINE
    LIVE
    INGAME
    INQUEUE
}

enum chatType {
    PUBLIC
    PRIVATE
    PROTECTED
}

enum ChatUserRole {
    OWNER
    ADMIN
    MEMBER
}

enum MessageType {
    NORMAL
    SPECIAL
}

enum ChatUserStatus {
    NORMAL
    MUTE
    BAN
    OUT
    INVITED
}

enum ChatRoomType {
    DM
    GROUP
}

enum NotificationType {
    ACHIEVEMENT
    FRIEND_REQUEST
    FRIEND_REQUEST_ACCEPTED
    MATCH_INVITE
    CHAT_INVITE
	RANK_UP
	RANK_DOWN
    PUNISHMENT
    COMPENSATION
}
